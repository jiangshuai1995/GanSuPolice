using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Beyon.Service.GridPlatform.PolygonSelect;
using Beyon.Service.GridPlatform.GridSelect;
using Beyon.Domain.PolySelect;
using Beyon.Dao;
using System.Windows;

namespace Beyon.DataMigrate
{
    class Program
    { 
        //todo interface
        private static PolygonSelectService polyService = new PolygonSelectService();
        private static GridSelectService gridService = new GridSelectService();
        private static DBOperate dbOperate = new DBOperate("Host=localhost;Port=II7;Database=gansupolice;User Id=beyondb;Password=beyondb;DBMS User=beyondb;DBMS Password=beyondb;Pooling=false");

        static void Main(string[] args)
        {
            //甘肃省
            Point gsPointMin = new Point(90.509461722222213, 31.096875999999998);
            Point gsPointMax = new Point(111.68560927777777, 43.008459);

            //兰州市坐标
            Point lzPointMin = new Point(103.5583, 35.9109);
            Point lzPointMax = new Point(104.0321, 36.1774);

            ////根据分页接口，获取坐标范围内所有案件，写入BeyonDB Anjian表
            //AnJianMigrate ajm = new AnJianMigrate(polyService, dbOperate);
            //ajm.Execute(new List<Point>() { lzPointMin, lzPointMax});

            //场所导入

            CsMigrate csm2 = new CsMigrate(polyService, dbOperate);
            csm2.ExecuteKeyCs(new List<Point>() { lzPointMin, lzPointMax });

            CsMigrate csm3 = new CsMigrate(polyService, dbOperate);
            csm3.ExecuteSpecialCs(new List<Point>() { lzPointMin, lzPointMax });

            CsMigrate csm1 = new CsMigrate(polyService, dbOperate);
            csm1.ExecutePublicCs(new List<Point>() { lzPointMin, lzPointMax });



            //PoliceManMigrate pmm = new PoliceManMigrate(polyService, gridService, dbOperate);
            //pmm.Execute(new List<Point>() { gsPointMin, gsPointMax });

            //string polygon = "103.843041642426,36.0575367703487,103.825636117499,36.0560719489439,103.825205287674,36.0556411191189,103.824602125919,36.054779459469,103.824257462059,36.0540039657841,103.823740466269,36.0530561401693,103.823568134339,36.0521944805194,103.823395802409,36.0515051527995,103.823395802409,36.0509019910446,103.823395802409,36.0503849952546,103.823740466269,36.0496095015697,103.824343628024,36.0487478419199,103.825119121709,36.04771385034,103.826239279254,36.0467660247251,103.828134930483,36.0455597012153,103.830633743468,36.0443533777054,103.833391054348,36.0429747222656,103.836148365227,36.0417683987558,103.838991842072,36.0409929050709,103.842007650846,36.040562075246,103.844592629796,36.040131245421,103.847091442781,36.039872747526,103.849762587695,36.039872747526,103.85260606454,36.0397004155961,103.85501871156,36.0397004155961,103.857431358579,36.0397004155961,103.859413175774,36.0397004155961,103.860877997179,36.0397004155961,103.862515150514,36.039958913491,103.863721474023,36.040389743316,103.864841631568,36.0406482412109,103.865617125253,36.0409929050709,103.866392618938,36.0411652370009,103.866995780693,36.0413375689308,103.867771274378,36.0415099008608,103.868460602098,36.0415960668258,103.869149929818,36.0416822327908,103.869925423503,36.0417683987558,103.870614751223,36.0420268966508,103.871390244907,36.0421992285807,103.872251904557,36.0425438924407,103.872941232277,36.0427162243707,103.873802891927,36.0430608882306,103.874578385612,36.0433193861256,103.875612377192,36.0437502159505,103.876387870877,36.0440948798105,103.877163364562,36.0444395436704,103.877852692282,36.0447842075304,103.878283522107,36.0450427054254,103.878455854037,36.0451288713903,103.878714351931,36.0453873692853,103.878714351931,36.0454735352503,103.878886683861,36.0457320331453,103.879059015791,36.0461628629702,103.879145181756,36.0464213608652,103.879145181756,36.0466798587601,103.879145181756,36.0469383566551,103.879145181756,36.0471968545501,103.879145181756,36.04754151841,103.878886683861,36.0482308461299,103.878369688072,36.0488340078848,103.877938858247,36.0495233356047,103.877163364562,36.0502126633247,103.876301704912,36.0506434931496,103.875095381402,36.0514189868345,103.873802891927,36.0519359826244,103.872338070522,36.0525391443793,103.870356253328,36.0532284720992,103.868460602098,36.0536593019242,103.866306452973,36.0540901317491,103.864066137883,36.0545209615741,103.861739656829,36.054779459469,103.858982345949,36.055037957364,103.857000528754,36.055210289294,103.85519104349,36.0555549531539,103.85398471998,36.0556411191189,103.8529507284,36.0558134510489,103.85208906875,36.0558996170139,103.8512274091,36.0559857829789,103.85053808138,36.0561581149089,103.84967642173,36.0561581149089,103.84898709401,36.0561581149089,103.848297766291,36.0562442808738,103.847608438571,36.0563304468388,103.846832944886,36.0564166128038,103.846229783131,36.0565027787688,103.845368123481,36.0566751106988,103.844937293656,36.0566751106988,103.844161799971,36.0567612766638,103.843386306286,36.0569336085938,103.842610812601,36.0570197745587,103.841921484881,36.0571059405237,103.841145991197,36.0572782724537,103.840715161372,36.0574506043837,103.840284331547,36.0576229363137,103.840025833652,36.0577952682436,103.839681169792,36.0578814342086,103.839422671897,36.0579676001736,103.839250339967,36.0581399321036,103.838819510142,36.0583122640336,103.838561012247,36.0583122640336,103.838388680317,36.0583122640336,103.838216348387,36.0584845959635,103.838044016457,36.0584845959635,103.837957850492,36.0584845959635,103.837871684527,36.0585707619285,103.837785518562,36.0585707619285,103.837699352597,36.0586569278935,103.837527020667,36.0586569278935,103.837354688737,36.0586569278935,103.837182356807,36.0587430938585,103.837096190842,36.0587430938585";
            //string[] polygonList = polygon.Split(new String[]{","}, StringSplitOptions.RemoveEmptyEntries);
            //List<Point> polygonRange = new List<Point>();
            //for (int i = 0; i < polygonList.Length; i = i + 2 )
            //{
            //    Point p = new Point();
            //    p.X = Convert.ToDouble(polygonList[i]);
            //    p.Y = Convert.ToDouble(polygonList[i+1]);
            //    polygonRange.Add(p);
            //}


            //PrisonMigrate pmm = new PrisonMigrate(polyService, dbOperate);
            //pmm.Execute(new List<Point>() { lzPointMin, lzPointMax });
        }
    }
}
